#! /usr/bin/perl -w

use strict;
use SMT::Utils;
use SMT::SCCSync;
use File::Basename;
use Config::IniFiles;

use Locale::gettext ();
use POSIX ();     # Needed for setlocale()

POSIX::setlocale(&POSIX::LC_MESSAGES, "");

my $debug = 0;
my $vblevel = LOG_ERROR|LOG_WARN|LOG_INFO1;
my $logfile = "/var/log/smt/smt-ncc-scc-migration";
my $exitcode = 0;
my $help = 0;
my $check_only = 0;

use Getopt::Long;
Getopt::Long::Configure( 'no_auto_abbrev');
my $optres = Getopt::Long::GetOptions(
                                      "logfile|L=s" => \$logfile,
                                      'debug|d'     => \$debug,
                                      "verboselevel|v=i" => \$vblevel,
                                      'help|h'      => \$help,
                                      'check-only|c'=> \$check_only
                                     );

if ( (defined $help && $help == 1 ) || !$optres )
{
    print basename($0) . " : " . __("Migrate SMT from NCC to SCC.\n\n");
    print __("Usage:\n");
    print basename($0) . " [options]";
    print "\n\n";
    print __("Options:\n");
    print "--logfile -L file         ".__("Path to logfile\n");
    print "--debug                   ".__("Enable debug mode\n");
    print "--verboselevel -v level   ".__("set the verbose level\n");
    print "--check-only              ",__("Only check whether migration is possible\n");
    exit 0;
}

$vblevel = LOG_ERROR|LOG_WARN|LOG_INFO1|LOG_INFO2|LOG_DEBUG|LOG_DEBUG2 if($debug);

# open the logfile

my $LOG = SMT::Utils::openLog($logfile);

my $cfg = undef;

sub _writeConfig
{
    my $cfg = shift;
    my ($section, $key, $value) = @_;
    if(not $cfg->setval($section, $key, $value))
    {
        $cfg->newval($section, $key, $value);
    }
    $cfg->RewriteConfig();
    my ($login,$pass,$uid,$gid) = getpwnam("wwwrun");
    chown 0, $gid, "/etc/smt.conf";
}

sub _testDbSchema
{
    my $dbh = shift;

    my $v = $dbh->selectrow_hashref("SELECT version FROM migration_schema_version WHERE name = 'smt'");
    if(!$v || !$v->{version} || $v->{version} < 2.00)
    {
        SMT::Utils::printLog($LOG, $vblevel, LOG_ERROR, "Unable to migrate. DB schema missmatch.");
        SMT::Utils::unLockAndExit( "smt-ncc-scc-migration", 1, $LOG, $vblevel);
    }
}

eval
{
    $cfg = SMT::Utils::getSMTConfig();
};
if($@ || !defined $cfg)
{
    SMT::Utils::printLog($LOG, $vblevel, LOG_ERROR, sprintf(__("Cannot read the SMT configuration file: %s"), $@));
    exit 1;
}

my $dbh = SMT::Utils::db_connect($cfg);

if(!$dbh)
{
    SMT::Utils::printLog($LOG, $vblevel, LOG_ERROR,  __("Cannot connect to database"));
    exit 1;
}

if(!SMT::Utils::openLock("smt-ncc-scc-migration"))
{
    print __("Migration process is still running.\n");
    exit 0;
}

_testDbSchema($dbh);

# re-write parts of the config file
my $regurl = $cfg->val('NU', 'NURegUrl');
my $regapi = $cfg->val('NU', 'ApiType', 'NCC');
if ( $regurl !~ /^https:\/\/secure-www\.novell\.com/ || $regapi ne 'NCC')
{
    SMT::Utils::printLog($LOG, $vblevel, LOG_ERROR, "Not connected to NCC");
    SMT::Utils::unLockAndExit( "smt-ncc-scc-migration", 1, $LOG, $vblevel);
}
_writeConfig($cfg, 'NU', 'NURegUrl', 'https://scc.suse.com/connect');
_writeConfig($cfg, 'NU', 'ApiType', 'SCC');

eval
{
    my $sccsync = SMT::SCCSync->new(vblevel => $vblevel,
                                    log     => $LOG);
    $sccsync->migrate(1);
    printLog($LOG, $vblevel, LOG_INFO1, __("Checking if a migration is possible ..."));
    if(($exitcode = $sccsync->canMigrate()) > 0)
    {
        _writeConfig($cfg, 'NU', 'NURegUrl', $regurl);
        _writeConfig($cfg, 'NU', 'ApiType', 'NCC');
        SMT::Utils::unLockAndExit( "smt-ncc-scc-migration", $exitcode, $LOG, $vblevel);
    }

    if ( defined $check_only && $check_only == 1 )
    {
        _writeConfig($cfg, 'NU', 'NURegUrl', $regurl);
        _writeConfig($cfg, 'NU', 'ApiType', 'NCC');
	SMT::Utils::unLockAndExit( "smt-ncc-scc-migration", 0, $LOG, $vblevel);
    }

    # DB Products, Catalogs and ProductCatalogs: migrate PRODUCTDATAIDs
    printLog($LOG, $vblevel, LOG_INFO1, __("Migrating Product and Repository information"));
    my $res = $sccsync->products();
    if ($res)
    {
        SMT::Utils::printLog($LOG, $vblevel, LOG_ERROR, sprintf(__("%d Error(s) while migrating data."), $res));
        SMT::Utils::unLockAndExit( "smt-ncc-scc-migration", 1, $LOG, $vblevel);
    }
    printLog($LOG, $vblevel, LOG_INFO1, __("Migrating Subscription information"));
    $res = $sccsync->subscriptions();
    if ($res)
    {
        SMT::Utils::printLog($LOG, $vblevel, LOG_ERROR, sprintf(__("%d Error(s) while migrating data."), $res));
        SMT::Utils::unLockAndExit( "smt-ncc-scc-migration", 1, $LOG, $vblevel);
    }

    printLog($LOG, $vblevel, LOG_INFO1, __("Flagged repositories which can be mirrored"));
    $res = $sccsync->mark_repos_mirrorable();
    if ($res)
    {
        SMT::Utils::printLog($LOG, $vblevel, LOG_ERROR, sprintf(__("%d Error(s) while migrating data."), $res));
        SMT::Utils::unLockAndExit( "smt-ncc-scc-migration", 1, $LOG, $vblevel);
    }

    printLog($LOG, $vblevel, LOG_INFO1, __("Cleanup Database"));
    $res = $sccsync->cleanup_db();
    if ($res)
    {
        SMT::Utils::printLog($LOG, $vblevel, LOG_ERROR, sprintf(__("%d Error(s) while migrating data."), $res));
        SMT::Utils::unLockAndExit( "smt-ncc-scc-migration", 1, $LOG, $vblevel);
    }

};
if ($@)
{
    SMT::Utils::printLog($LOG, $vblevel, LOG_ERROR, $@);
    SMT::Utils::unLockAndExit( "smt-ncc-scc-migration", 1, $LOG, $vblevel);
}
SMT::Utils::unLockAndExit( "smt-ncc-scc-migration", 0, $LOG, $vblevel);

